; This file shows how your code will be invoked.

; zipcodes.scm contains all the US zipcodes.
; You should not modify this file. Your code
; should work for other instances of this file.
(load "zipcodes.scm")
(load "hw2S19.scm")
(load "hw2S19Sol.scm")

(define (smallListDisplay lst)
	(if (<= (length lst) 1000) (display lst) (display "(..zipcodes..)"))
)

(define (smallDisplay val)
	(COND
		((LIST? val) (smallListDisplay val))
		(else (display val))
	)
)

(define (smallDisplayNL val)
	(smallDisplay val)
	(newline)
)

(define (displayNL value)
	(display value)
	(newline)
	#t
)

(define (displayParams lst)
	 (smallDisplay (car lst))
	 (smallDisplay " ")
     (if (NULL? (cdr lst)) #t (displayParams (cdr lst)))
)
     
(define (correct F params ans)
	(smallDisplay "Applied to ")
	(displayParams params)
	(smallDisplay " produced: ")
	(smallDisplay ans)
	(smallDisplayNL "    CORRECT")
	#t
)

(define (incorrect F params ans corrans)
	(smallDisplay "Applied to ")
	(displayParams params)
	(smallDisplay " produced: ")
	(smallDisplay ans)
	(smallDisplay "    INCORRECT.  Should have produced: ")
	(smallDisplayNL corrans)
	#f
)

(define (check F FCORR args)
	(define ans (apply F args))
	(define corrAns (apply FCORR args))
	(COND
		((EQUAL? ans corrAns) (correct F args ans))
		(else        		(incorrect F args ans corrAns)) 
	)
)
	
(displayNL "")
(displayNL "quadratic")
(check quadratic quadraticC '(1 0 0))
(check quadratic quadraticC '(1 3 -4))
(check quadratic quadraticC '(-2 5 3))
(check quadratic quadraticC '(1 2 1))
(check quadratic quadraticC '(1 2 5))

(displayNL "")
(displayNL "minutesBetween")
(check minutesBetween minutesBetweenC '(12 5 13 3))
(check minutesBetween minutesBetweenC '(0 0 23 59))
(check minutesBetween minutesBetweenC '(23 59 0 0))
(check minutesBetween minutesBetweenC '(1 0 2 0))
(check minutesBetween minutesBetweenC '(3 0 2 0))
(check minutesBetween minutesBetweenC '(1 59 2 0))
(check minutesBetween minutesBetweenC '(3 0 2 59))
(check minutesBetween minutesBetweenC '(0 0 12 30))
(check minutesBetween minutesBetweenC '(0 0 12 0))

(displayNL "")
(displayNL "negatives")
(check negatives negativesC '((-1 1 2 3 4 -4 5)))
(check negatives negativesC '((1 1 2 3 4 4 5)))
(check negatives negativesC '((1)))
(check negatives negativesC '((-1)))
(check negatives negativesC '((1 -1)))
(check negatives negativesC '(()))

(displayNL "")
(displayNL "reverse")
(check reverse reverseC '((-1 1 2 3 4 -4 5)))
(check reverse reverseC '((1 1 2 3 4 4 5)))
(check reverse reverseC '((1)))
(check reverse reverseC '((-1)))
(check reverse reverseC '((1 -1)))
(check reverse reverseC '(()))

(displayNL "")
(displayNL "isFlatListOfNumbers")
(check isFlatListOfNumbers isFlatListOfNumbersC '((-1 1 2 3 4 -4 5)))
(check isFlatListOfNumbers isFlatListOfNumbersC '((-1 1 2 (3 4) -4 5)))
(check isFlatListOfNumbers isFlatListOfNumbersC '((-1 b 5)))
(check isFlatListOfNumbers isFlatListOfNumbersC '(a))
(check isFlatListOfNumbers isFlatListOfNumbersC '(1))
(check isFlatListOfNumbers isFlatListOfNumbersC '(a))
(check isFlatListOfNumbers isFlatListOfNumbersC '((1)))
(check isFlatListOfNumbers isFlatListOfNumbersC '(()))

(displayNL "")
(displayNL "minAndMax")
(check minAndMax minAndMaxC '((1 2 -3 4 2)))
(check minAndMax minAndMaxC '((1)))
(check minAndMax minAndMaxC '((10000 20000 -30000 40000 20000)))
(check minAndMax minAndMaxC '((-10000 -20000 30000 -40000 -20000)))
(check minAndMax minAndMaxC '((-100000)))

(displayNL "")
(displayNL "crossProduct")
(check crossProduct crossProductC '(()()))
(check crossProduct crossProductC '((1 2) (a b c)))
(check crossProduct crossProductC '((1) (a b c)))
(check crossProduct crossProductC '((1) (a)))
(check crossProduct crossProductC '((1 2) (a)))
(check crossProduct crossProductC '((1) (a b)))

(displayNL "")
(displayNL "replace")
(check replace replaceC '(a x (a a (a b c) a b a c ((a)) a b)))
(check replace replaceC '(a x (a)))
(check replace replaceC '(a x ()))
(check replace replaceC '(a x (()())))
(check replace replaceC '(a x ((x)(x))))
(check replace replaceC '(a x ((a)(a))))
(check replace replaceC '(a (1 2 3) ((a)(a))))

(displayNL "")
(displayNL "getLatLon")
(check getLatLon getLatLonC (list 99553 "Akutan" "AK" "Aleutians East" zipcodes))
(check getLatLon getLatLonC (list 45056 "Oxford" "OH" "Butler" zipcodes))
(check getLatLon getLatLonC (list 11111 "Oxford" "OH" "Butler" zipcodes))
(check getLatLon getLatLonC (list 96793 "Wailuku" "HI" "Maui" zipcodes))
(check getLatLon getLatLonC (list 48134 "Flat Rock" "MI" "Wayne" zipcodes))

(displayNL "")
(displayNL "getStatesThatContainThisCity")
(check getStatesThatContainThisCity getStatesThatContainThisCityC (list "Oxford" zipcodes))
(check getStatesThatContainThisCity getStatesThatContainThisCityC (list "Franklin" zipcodes))
(check getStatesThatContainThisCity getStatesThatContainThisCityC (list "Tippecanoe" zipcodes))
(check getStatesThatContainThisCity getStatesThatContainThisCityC (list "King Of Prussia" zipcodes))
(check getStatesThatContainThisCity getStatesThatContainThisCityC (list "TheNameOfACityThatDoesNotExist" zipcodes))

(displayNL "")
(displayNL "getDistanceBetweenLocations")
(check getDistanceBetweenZipCodes getDistanceBetweenZipCodesC (list 45056 "Oxford" "OH" "Butler" 99553 "Akutan" "AK" "Aleutians East" zipcodes))
(check getDistanceBetweenZipCodes getDistanceBetweenZipCodesC (list 99553 "Akutan" "AK" "Aleutians East" 45056 "Oxford" "OH" "Butler" zipcodes))
(check getDistanceBetweenZipCodes getDistanceBetweenZipCodesC (list 45056 "Oxford" "OH" "Butler" 47003 "West College Corner" "IN" "Franklin" zipcodes))
(check getDistanceBetweenZipCodes getDistanceBetweenZipCodesC (list 45056 "Oxford" "OH" "Butler" 45056 "Oxford" "OH" "Butler" zipcodes))
(check getDistanceBetweenZipCodes getDistanceBetweenZipCodesC (list 45042 "Middletown" "OH" "Butler" 45043 "Middletown" "OH" "Butler" zipcodes))

; Some sample predicates
(define (LARGE? x) (>= (abs x) 10))
(define (SMALL? x) (NOT (LARGE? x)))
(define (TINY? x) (< (abs x) 0.1))

(displayNL "")
(displayNL "simpleFilter")
(check simpleFilter simpleFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) POSITIVE?))
(check simpleFilter simpleFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) LARGE?))
(check simpleFilter simpleFilterC (list '() LARGE?))
(check simpleFilter simpleFilterC (list '(0) LARGE?))
(check simpleFilter simpleFilterC (list '(10) LARGE?))

(displayNL "")
(displayNL "complexFilter")
(check complexFilter complexFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) '(POSITIVE?)))
(check complexFilter complexFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) '(POSITIVE? EVEN?)))
(check complexFilter complexFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) '(POSITIVE? EVEN? LARGE?)))
(check complexFilter complexFilterC (list '(1 2 3 11 22 33 -1 -2 -3 -11 -22 -33) '(POSITIVE? EVEN? POSITIVE? ODD?)))
(check complexFilter complexFilterC (list '(1 2 0.001 -0.03 123 100) '(TINY?)))

